Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body

    6 body: _LBRACKET fbody _RBRACKET

    7 fbody: variable_list statement_list
    8      | variable_list statement_list return_statement

    9 variable_list: %empty
   10              | variable_list variable

   11 $@2: %empty

   12 variable: _TYPE $@2 vars _SEMICOLON

   13 compound_statement: _LBRACKET statement_list _RBRACKET

   14 assign_in_one_line: %empty
   15                   | _ASSIGN literal

   16 vars: _ID assign_in_one_line
   17     | vars _COMMA _ID

   18 switch: switch_head _SRB _LBRACKET switch_body _RBRACKET

   19 switch_head: _SWITCH _SLB _ID

   20 switch_body: case
   21            | case default

   22 default: _SDEF _SARROW statement

   23 $@3: %empty

   24 case: _SCASE literal $@3 _SARROW statement

   25 $@4: %empty

   26 case: case _SCASE literal $@4 _SARROW statement

   27 para_f: _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON _RPAREN statement
   28       | _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON _PASO literal _RPAREN statement

   29 statement_list: %empty
   30               | statement_list statement

   31 statement: compound_statement
   32          | assignment_statement
   33          | if_statement
   34          | increment_statement
   35          | void_call_statement
   36          | para_f
   37          | switch

   38 inc: %empty
   39    | _INC

   40 increment_statement: _ID _INC _SEMICOLON

   41 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   42 num_exp: exp
   43        | num_exp _AROP exp

   44 void_call_statement: f_call _SEMICOLON

   45 exp: literal
   46    | _ID inc
   47    | f_call
   48    | _LPAREN num_exp _RPAREN

   49 literal: _INT_NUMBER
   50        | _UINT_NUMBER

   51 f_call: function_call
   52       | function_call _INC

   53 $@5: %empty

   54 function_call: _ID $@5 _LPAREN argument _RPAREN

   55 args: _ID
   56     | literal

   57 args_f: args
   58       | args_f _COMMA args

   59 argument: %empty
   60         | argument args_f

   61 parameter: %empty
   62          | parameter params

   63 params: _TYPE _ID
   64       | params _COMMA _TYPE _ID

   65 if_statement: if_part
   66             | if_part _ELSE statement

   67 if_part: _IF _LPAREN rel_exp _RPAREN statement

   68 rel_exp: num_exp _RELOP num_exp

   69 ret: %empty
   70    | num_exp

   71 return_statement: _RETURN ret _SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _TYPE <i> (258) 5 12 27 28 63 64
    _IF (259) 67
    _ELSE (260) 66
    _RETURN (261) 71
    _ID <s> (262) 5 16 17 19 40 41 46 54 55 63 64
    _INT_NUMBER <s> (263) 49
    _UINT_NUMBER <s> (264) 50
    _COMMA (265) 17 58 64
    _LPAREN (266) 5 27 28 48 54 67
    _RPAREN (267) 5 27 28 48 54 67
    _PARA (268) 27 28
    _PASO (269) 28
    _LBRACKET (270) 6 13 18
    _RBRACKET (271) 6 13 18
    _ASSIGN (272) 15 41
    _SEMICOLON (273) 12 27 28 40 41 44 71
    _AROP <i> (274) 43
    _RELOP <i> (275) 68
    _INC (276) 39 40 52
    _SARROW (277) 22 24 26
    _SWITCH (278) 19
    _SCASE (279) 24 26
    _SDEF (280) 22
    _SLB (281) 19
    _SRB (282) 18
    ONLY_IF (283)


Nonterminals, with rules where they appear

    $accept (29)
        on left: 0
    program (30)
        on left: 1
        on right: 0
    function_list (31)
        on left: 2 3
        on right: 1 3
    function (32)
        on left: 5
        on right: 2 3
    $@1 (33)
        on left: 4
        on right: 5
    body (34)
        on left: 6
        on right: 5
    fbody (35)
        on left: 7 8
        on right: 6
    variable_list (36)
        on left: 9 10
        on right: 7 8 10
    variable (37)
        on left: 12
        on right: 10
    $@2 (38)
        on left: 11
        on right: 12
    compound_statement (39)
        on left: 13
        on right: 31
    assign_in_one_line (40)
        on left: 14 15
        on right: 16
    vars (41)
        on left: 16 17
        on right: 12 17 27 28
    switch (42)
        on left: 18
        on right: 37
    switch_head (43)
        on left: 19
        on right: 18
    switch_body (44)
        on left: 20 21
        on right: 18
    default (45)
        on left: 22
        on right: 21
    case (46)
        on left: 24 26
        on right: 20 21 26
    $@3 (47)
        on left: 23
        on right: 24
    $@4 (48)
        on left: 25
        on right: 26
    para_f (49)
        on left: 27 28
        on right: 36
    statement_list (50)
        on left: 29 30
        on right: 7 8 13 30
    statement (51)
        on left: 31 32 33 34 35 36 37
        on right: 22 24 26 27 28 30 66 67
    inc (52)
        on left: 38 39
        on right: 46
    increment_statement (53)
        on left: 40
        on right: 34
    assignment_statement (54)
        on left: 41
        on right: 32
    num_exp <i> (55)
        on left: 42 43
        on right: 41 43 48 68 70
    void_call_statement (56)
        on left: 44
        on right: 35
    exp <i> (57)
        on left: 45 46 47 48
        on right: 42 43
    literal <i> (58)
        on left: 49 50
        on right: 15 24 26 28 45 56
    f_call <i> (59)
        on left: 51 52
        on right: 44 47
    function_call <i> (60)
        on left: 54
        on right: 51 52
    $@5 (61)
        on left: 53
        on right: 54
    args (62)
        on left: 55 56
        on right: 57 58
    args_f (63)
        on left: 57 58
        on right: 58 60
    argument <i> (64)
        on left: 59 60
        on right: 54 60
    parameter (65)
        on left: 61 62
        on right: 5 62
    params (66)
        on left: 63 64
        on right: 62 64
    if_statement (67)
        on left: 65 66
        on right: 33
    if_part (68)
        on left: 67
        on right: 65 66
    rel_exp <i> (69)
        on left: 68
        on right: 27 28 67
    ret (70)
        on left: 69 70
        on right: 71
    return_statement (71)
        on left: 71
        on right: 8


State 0

    0 $accept: . program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4


State 1

    5 function: _TYPE . _ID $@1 _LPAREN parameter _RPAREN body

    _ID  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7


State 4

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 5

    5 function: _TYPE _ID . $@1 _LPAREN parameter _RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 8

    5 function: _TYPE _ID $@1 . _LPAREN parameter _RPAREN body

    _LPAREN  shift, and go to state 9


State 9

    5 function: _TYPE _ID $@1 _LPAREN . parameter _RPAREN body

    $default  reduce using rule 61 (parameter)

    parameter  go to state 10


State 10

    5 function: _TYPE _ID $@1 _LPAREN parameter . _RPAREN body
   62 parameter: parameter . params

    _TYPE    shift, and go to state 11
    _RPAREN  shift, and go to state 12

    params  go to state 13


State 11

   63 params: _TYPE . _ID

    _ID  shift, and go to state 14


State 12

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN . body

    _LBRACKET  shift, and go to state 15

    body  go to state 16


State 13

   62 parameter: parameter params .
   64 params: params . _COMMA _TYPE _ID

    _COMMA  shift, and go to state 17

    $default  reduce using rule 62 (parameter)


State 14

   63 params: _TYPE _ID .

    $default  reduce using rule 63 (params)


State 15

    6 body: _LBRACKET . fbody _RBRACKET

    $default  reduce using rule 9 (variable_list)

    fbody          go to state 18
    variable_list  go to state 19


State 16

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body .

    $default  reduce using rule 5 (function)


State 17

   64 params: params _COMMA . _TYPE _ID

    _TYPE  shift, and go to state 20


State 18

    6 body: _LBRACKET fbody . _RBRACKET

    _RBRACKET  shift, and go to state 21


State 19

    7 fbody: variable_list . statement_list
    8      | variable_list . statement_list return_statement
   10 variable_list: variable_list . variable

    _TYPE  shift, and go to state 22

    $default  reduce using rule 29 (statement_list)

    variable        go to state 23
    statement_list  go to state 24


State 20

   64 params: params _COMMA _TYPE . _ID

    _ID  shift, and go to state 25


State 21

    6 body: _LBRACKET fbody _RBRACKET .

    $default  reduce using rule 6 (body)


State 22

   12 variable: _TYPE . $@2 vars _SEMICOLON

    $default  reduce using rule 11 ($@2)

    $@2  go to state 26


State 23

   10 variable_list: variable_list variable .

    $default  reduce using rule 10 (variable_list)


State 24

    7 fbody: variable_list statement_list .
    8      | variable_list statement_list . return_statement
   30 statement_list: statement_list . statement

    _IF        shift, and go to state 27
    _RETURN    shift, and go to state 28
    _ID        shift, and go to state 29
    _PARA      shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _SWITCH    shift, and go to state 32

    $default  reduce using rule 7 (fbody)

    compound_statement    go to state 33
    switch                go to state 34
    switch_head           go to state 35
    para_f                go to state 36
    statement             go to state 37
    increment_statement   go to state 38
    assignment_statement  go to state 39
    void_call_statement   go to state 40
    f_call                go to state 41
    function_call         go to state 42
    if_statement          go to state 43
    if_part               go to state 44
    return_statement      go to state 45


State 25

   64 params: params _COMMA _TYPE _ID .

    $default  reduce using rule 64 (params)


State 26

   12 variable: _TYPE $@2 . vars _SEMICOLON

    _ID  shift, and go to state 46

    vars  go to state 47


State 27

   67 if_part: _IF . _LPAREN rel_exp _RPAREN statement

    _LPAREN  shift, and go to state 48


State 28

   71 return_statement: _RETURN . ret _SEMICOLON

    _ID           shift, and go to state 49
    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51
    _LPAREN       shift, and go to state 52

    $default  reduce using rule 69 (ret)

    num_exp        go to state 53
    exp            go to state 54
    literal        go to state 55
    f_call         go to state 56
    function_call  go to state 42
    ret            go to state 57


State 29

   40 increment_statement: _ID . _INC _SEMICOLON
   41 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON
   54 function_call: _ID . $@5 _LPAREN argument _RPAREN

    _ASSIGN  shift, and go to state 58
    _INC     shift, and go to state 59

    $default  reduce using rule 53 ($@5)

    $@5  go to state 60


State 30

   27 para_f: _PARA . _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON _RPAREN statement
   28       | _PARA . _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON _PASO literal _RPAREN statement

    _LPAREN  shift, and go to state 61


State 31

   13 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 29 (statement_list)

    statement_list  go to state 62


State 32

   19 switch_head: _SWITCH . _SLB _ID

    _SLB  shift, and go to state 63


State 33

   31 statement: compound_statement .

    $default  reduce using rule 31 (statement)


State 34

   37 statement: switch .

    $default  reduce using rule 37 (statement)


State 35

   18 switch: switch_head . _SRB _LBRACKET switch_body _RBRACKET

    _SRB  shift, and go to state 64


State 36

   36 statement: para_f .

    $default  reduce using rule 36 (statement)


State 37

   30 statement_list: statement_list statement .

    $default  reduce using rule 30 (statement_list)


State 38

   34 statement: increment_statement .

    $default  reduce using rule 34 (statement)


State 39

   32 statement: assignment_statement .

    $default  reduce using rule 32 (statement)


State 40

   35 statement: void_call_statement .

    $default  reduce using rule 35 (statement)


State 41

   44 void_call_statement: f_call . _SEMICOLON

    _SEMICOLON  shift, and go to state 65


State 42

   51 f_call: function_call .
   52       | function_call . _INC

    _INC  shift, and go to state 66

    $default  reduce using rule 51 (f_call)


State 43

   33 statement: if_statement .

    $default  reduce using rule 33 (statement)


State 44

   65 if_statement: if_part .
   66             | if_part . _ELSE statement

    _ELSE  shift, and go to state 67

    $default  reduce using rule 65 (if_statement)


State 45

    8 fbody: variable_list statement_list return_statement .

    $default  reduce using rule 8 (fbody)


State 46

   16 vars: _ID . assign_in_one_line

    _ASSIGN  shift, and go to state 68

    $default  reduce using rule 14 (assign_in_one_line)

    assign_in_one_line  go to state 69


State 47

   12 variable: _TYPE $@2 vars . _SEMICOLON
   17 vars: vars . _COMMA _ID

    _COMMA      shift, and go to state 70
    _SEMICOLON  shift, and go to state 71


State 48

   67 if_part: _IF _LPAREN . rel_exp _RPAREN statement

    _ID           shift, and go to state 49
    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51
    _LPAREN       shift, and go to state 52

    num_exp        go to state 72
    exp            go to state 54
    literal        go to state 55
    f_call         go to state 56
    function_call  go to state 42
    rel_exp        go to state 73


State 49

   46 exp: _ID . inc
   54 function_call: _ID . $@5 _LPAREN argument _RPAREN

    _INC  shift, and go to state 74

    _LPAREN   reduce using rule 53 ($@5)
    $default  reduce using rule 38 (inc)

    inc  go to state 75
    $@5  go to state 60


State 50

   49 literal: _INT_NUMBER .

    $default  reduce using rule 49 (literal)


State 51

   50 literal: _UINT_NUMBER .

    $default  reduce using rule 50 (literal)


State 52

   48 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 49
    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51
    _LPAREN       shift, and go to state 52

    num_exp        go to state 76
    exp            go to state 54
    literal        go to state 55
    f_call         go to state 56
    function_call  go to state 42


State 53

   43 num_exp: num_exp . _AROP exp
   70 ret: num_exp .

    _AROP  shift, and go to state 77

    $default  reduce using rule 70 (ret)


State 54

   42 num_exp: exp .

    $default  reduce using rule 42 (num_exp)


State 55

   45 exp: literal .

    $default  reduce using rule 45 (exp)


State 56

   47 exp: f_call .

    $default  reduce using rule 47 (exp)


State 57

   71 return_statement: _RETURN ret . _SEMICOLON

    _SEMICOLON  shift, and go to state 78


State 58

   41 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 49
    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51
    _LPAREN       shift, and go to state 52

    num_exp        go to state 79
    exp            go to state 54
    literal        go to state 55
    f_call         go to state 56
    function_call  go to state 42


State 59

   40 increment_statement: _ID _INC . _SEMICOLON

    _SEMICOLON  shift, and go to state 80


State 60

   54 function_call: _ID $@5 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 81


State 61

   27 para_f: _PARA _LPAREN . _TYPE vars _SEMICOLON rel_exp _SEMICOLON _RPAREN statement
   28       | _PARA _LPAREN . _TYPE vars _SEMICOLON rel_exp _SEMICOLON _PASO literal _RPAREN statement

    _TYPE  shift, and go to state 82


State 62

   13 compound_statement: _LBRACKET statement_list . _RBRACKET
   30 statement_list: statement_list . statement

    _IF        shift, and go to state 27
    _ID        shift, and go to state 29
    _PARA      shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _RBRACKET  shift, and go to state 83
    _SWITCH    shift, and go to state 32

    compound_statement    go to state 33
    switch                go to state 34
    switch_head           go to state 35
    para_f                go to state 36
    statement             go to state 37
    increment_statement   go to state 38
    assignment_statement  go to state 39
    void_call_statement   go to state 40
    f_call                go to state 41
    function_call         go to state 42
    if_statement          go to state 43
    if_part               go to state 44


State 63

   19 switch_head: _SWITCH _SLB . _ID

    _ID  shift, and go to state 84


State 64

   18 switch: switch_head _SRB . _LBRACKET switch_body _RBRACKET

    _LBRACKET  shift, and go to state 85


State 65

   44 void_call_statement: f_call _SEMICOLON .

    $default  reduce using rule 44 (void_call_statement)


State 66

   52 f_call: function_call _INC .

    $default  reduce using rule 52 (f_call)


State 67

   66 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 27
    _ID        shift, and go to state 29
    _PARA      shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _SWITCH    shift, and go to state 32

    compound_statement    go to state 33
    switch                go to state 34
    switch_head           go to state 35
    para_f                go to state 36
    statement             go to state 86
    increment_statement   go to state 38
    assignment_statement  go to state 39
    void_call_statement   go to state 40
    f_call                go to state 41
    function_call         go to state 42
    if_statement          go to state 43
    if_part               go to state 44


State 68

   15 assign_in_one_line: _ASSIGN . literal

    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51

    literal  go to state 87


State 69

   16 vars: _ID assign_in_one_line .

    $default  reduce using rule 16 (vars)


State 70

   17 vars: vars _COMMA . _ID

    _ID  shift, and go to state 88


State 71

   12 variable: _TYPE $@2 vars _SEMICOLON .

    $default  reduce using rule 12 (variable)


State 72

   43 num_exp: num_exp . _AROP exp
   68 rel_exp: num_exp . _RELOP num_exp

    _AROP   shift, and go to state 77
    _RELOP  shift, and go to state 89


State 73

   67 if_part: _IF _LPAREN rel_exp . _RPAREN statement

    _RPAREN  shift, and go to state 90


State 74

   39 inc: _INC .

    $default  reduce using rule 39 (inc)


State 75

   46 exp: _ID inc .

    $default  reduce using rule 46 (exp)


State 76

   43 num_exp: num_exp . _AROP exp
   48 exp: _LPAREN num_exp . _RPAREN

    _RPAREN  shift, and go to state 91
    _AROP    shift, and go to state 77


State 77

   43 num_exp: num_exp _AROP . exp

    _ID           shift, and go to state 49
    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51
    _LPAREN       shift, and go to state 52

    exp            go to state 92
    literal        go to state 55
    f_call         go to state 56
    function_call  go to state 42


State 78

   71 return_statement: _RETURN ret _SEMICOLON .

    $default  reduce using rule 71 (return_statement)


State 79

   41 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   43 num_exp: num_exp . _AROP exp

    _SEMICOLON  shift, and go to state 93
    _AROP       shift, and go to state 77


State 80

   40 increment_statement: _ID _INC _SEMICOLON .

    $default  reduce using rule 40 (increment_statement)


State 81

   54 function_call: _ID $@5 _LPAREN . argument _RPAREN

    $default  reduce using rule 59 (argument)

    argument  go to state 94


State 82

   27 para_f: _PARA _LPAREN _TYPE . vars _SEMICOLON rel_exp _SEMICOLON _RPAREN statement
   28       | _PARA _LPAREN _TYPE . vars _SEMICOLON rel_exp _SEMICOLON _PASO literal _RPAREN statement

    _ID  shift, and go to state 46

    vars  go to state 95


State 83

   13 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 13 (compound_statement)


State 84

   19 switch_head: _SWITCH _SLB _ID .

    $default  reduce using rule 19 (switch_head)


State 85

   18 switch: switch_head _SRB _LBRACKET . switch_body _RBRACKET

    _SCASE  shift, and go to state 96

    switch_body  go to state 97
    case         go to state 98


State 86

   66 if_statement: if_part _ELSE statement .

    $default  reduce using rule 66 (if_statement)


State 87

   15 assign_in_one_line: _ASSIGN literal .

    $default  reduce using rule 15 (assign_in_one_line)


State 88

   17 vars: vars _COMMA _ID .

    $default  reduce using rule 17 (vars)


State 89

   68 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 49
    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51
    _LPAREN       shift, and go to state 52

    num_exp        go to state 99
    exp            go to state 54
    literal        go to state 55
    f_call         go to state 56
    function_call  go to state 42


State 90

   67 if_part: _IF _LPAREN rel_exp _RPAREN . statement

    _IF        shift, and go to state 27
    _ID        shift, and go to state 29
    _PARA      shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _SWITCH    shift, and go to state 32

    compound_statement    go to state 33
    switch                go to state 34
    switch_head           go to state 35
    para_f                go to state 36
    statement             go to state 100
    increment_statement   go to state 38
    assignment_statement  go to state 39
    void_call_statement   go to state 40
    f_call                go to state 41
    function_call         go to state 42
    if_statement          go to state 43
    if_part               go to state 44


State 91

   48 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 48 (exp)


State 92

   43 num_exp: num_exp _AROP exp .

    $default  reduce using rule 43 (num_exp)


State 93

   41 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 41 (assignment_statement)


State 94

   54 function_call: _ID $@5 _LPAREN argument . _RPAREN
   60 argument: argument . args_f

    _ID           shift, and go to state 101
    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51
    _RPAREN       shift, and go to state 102

    literal  go to state 103
    args     go to state 104
    args_f   go to state 105


State 95

   17 vars: vars . _COMMA _ID
   27 para_f: _PARA _LPAREN _TYPE vars . _SEMICOLON rel_exp _SEMICOLON _RPAREN statement
   28       | _PARA _LPAREN _TYPE vars . _SEMICOLON rel_exp _SEMICOLON _PASO literal _RPAREN statement

    _COMMA      shift, and go to state 70
    _SEMICOLON  shift, and go to state 106


State 96

   24 case: _SCASE . literal $@3 _SARROW statement

    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51

    literal  go to state 107


State 97

   18 switch: switch_head _SRB _LBRACKET switch_body . _RBRACKET

    _RBRACKET  shift, and go to state 108


State 98

   20 switch_body: case .
   21            | case . default
   26 case: case . _SCASE literal $@4 _SARROW statement

    _SCASE  shift, and go to state 109
    _SDEF   shift, and go to state 110

    $default  reduce using rule 20 (switch_body)

    default  go to state 111


State 99

   43 num_exp: num_exp . _AROP exp
   68 rel_exp: num_exp _RELOP num_exp .

    _AROP  shift, and go to state 77

    $default  reduce using rule 68 (rel_exp)


State 100

   67 if_part: _IF _LPAREN rel_exp _RPAREN statement .

    $default  reduce using rule 67 (if_part)


State 101

   55 args: _ID .

    $default  reduce using rule 55 (args)


State 102

   54 function_call: _ID $@5 _LPAREN argument _RPAREN .

    $default  reduce using rule 54 (function_call)


State 103

   56 args: literal .

    $default  reduce using rule 56 (args)


State 104

   57 args_f: args .

    $default  reduce using rule 57 (args_f)


State 105

   58 args_f: args_f . _COMMA args
   60 argument: argument args_f .

    _COMMA  shift, and go to state 112

    $default  reduce using rule 60 (argument)


State 106

   27 para_f: _PARA _LPAREN _TYPE vars _SEMICOLON . rel_exp _SEMICOLON _RPAREN statement
   28       | _PARA _LPAREN _TYPE vars _SEMICOLON . rel_exp _SEMICOLON _PASO literal _RPAREN statement

    _ID           shift, and go to state 49
    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51
    _LPAREN       shift, and go to state 52

    num_exp        go to state 72
    exp            go to state 54
    literal        go to state 55
    f_call         go to state 56
    function_call  go to state 42
    rel_exp        go to state 113


State 107

   24 case: _SCASE literal . $@3 _SARROW statement

    $default  reduce using rule 23 ($@3)

    $@3  go to state 114


State 108

   18 switch: switch_head _SRB _LBRACKET switch_body _RBRACKET .

    $default  reduce using rule 18 (switch)


State 109

   26 case: case _SCASE . literal $@4 _SARROW statement

    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51

    literal  go to state 115


State 110

   22 default: _SDEF . _SARROW statement

    _SARROW  shift, and go to state 116


State 111

   21 switch_body: case default .

    $default  reduce using rule 21 (switch_body)


State 112

   58 args_f: args_f _COMMA . args

    _ID           shift, and go to state 101
    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51

    literal  go to state 103
    args     go to state 117


State 113

   27 para_f: _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp . _SEMICOLON _RPAREN statement
   28       | _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp . _SEMICOLON _PASO literal _RPAREN statement

    _SEMICOLON  shift, and go to state 118


State 114

   24 case: _SCASE literal $@3 . _SARROW statement

    _SARROW  shift, and go to state 119


State 115

   26 case: case _SCASE literal . $@4 _SARROW statement

    $default  reduce using rule 25 ($@4)

    $@4  go to state 120


State 116

   22 default: _SDEF _SARROW . statement

    _IF        shift, and go to state 27
    _ID        shift, and go to state 29
    _PARA      shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _SWITCH    shift, and go to state 32

    compound_statement    go to state 33
    switch                go to state 34
    switch_head           go to state 35
    para_f                go to state 36
    statement             go to state 121
    increment_statement   go to state 38
    assignment_statement  go to state 39
    void_call_statement   go to state 40
    f_call                go to state 41
    function_call         go to state 42
    if_statement          go to state 43
    if_part               go to state 44


State 117

   58 args_f: args_f _COMMA args .

    $default  reduce using rule 58 (args_f)


State 118

   27 para_f: _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON . _RPAREN statement
   28       | _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON . _PASO literal _RPAREN statement

    _RPAREN  shift, and go to state 122
    _PASO    shift, and go to state 123


State 119

   24 case: _SCASE literal $@3 _SARROW . statement

    _IF        shift, and go to state 27
    _ID        shift, and go to state 29
    _PARA      shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _SWITCH    shift, and go to state 32

    compound_statement    go to state 33
    switch                go to state 34
    switch_head           go to state 35
    para_f                go to state 36
    statement             go to state 124
    increment_statement   go to state 38
    assignment_statement  go to state 39
    void_call_statement   go to state 40
    f_call                go to state 41
    function_call         go to state 42
    if_statement          go to state 43
    if_part               go to state 44


State 120

   26 case: case _SCASE literal $@4 . _SARROW statement

    _SARROW  shift, and go to state 125


State 121

   22 default: _SDEF _SARROW statement .

    $default  reduce using rule 22 (default)


State 122

   27 para_f: _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON _RPAREN . statement

    _IF        shift, and go to state 27
    _ID        shift, and go to state 29
    _PARA      shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _SWITCH    shift, and go to state 32

    compound_statement    go to state 33
    switch                go to state 34
    switch_head           go to state 35
    para_f                go to state 36
    statement             go to state 126
    increment_statement   go to state 38
    assignment_statement  go to state 39
    void_call_statement   go to state 40
    f_call                go to state 41
    function_call         go to state 42
    if_statement          go to state 43
    if_part               go to state 44


State 123

   28 para_f: _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON _PASO . literal _RPAREN statement

    _INT_NUMBER   shift, and go to state 50
    _UINT_NUMBER  shift, and go to state 51

    literal  go to state 127


State 124

   24 case: _SCASE literal $@3 _SARROW statement .

    $default  reduce using rule 24 (case)


State 125

   26 case: case _SCASE literal $@4 _SARROW . statement

    _IF        shift, and go to state 27
    _ID        shift, and go to state 29
    _PARA      shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _SWITCH    shift, and go to state 32

    compound_statement    go to state 33
    switch                go to state 34
    switch_head           go to state 35
    para_f                go to state 36
    statement             go to state 128
    increment_statement   go to state 38
    assignment_statement  go to state 39
    void_call_statement   go to state 40
    f_call                go to state 41
    function_call         go to state 42
    if_statement          go to state 43
    if_part               go to state 44


State 126

   27 para_f: _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON _RPAREN statement .

    $default  reduce using rule 27 (para_f)


State 127

   28 para_f: _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON _PASO literal . _RPAREN statement

    _RPAREN  shift, and go to state 129


State 128

   26 case: case _SCASE literal $@4 _SARROW statement .

    $default  reduce using rule 26 (case)


State 129

   28 para_f: _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON _PASO literal _RPAREN . statement

    _IF        shift, and go to state 27
    _ID        shift, and go to state 29
    _PARA      shift, and go to state 30
    _LBRACKET  shift, and go to state 31
    _SWITCH    shift, and go to state 32

    compound_statement    go to state 33
    switch                go to state 34
    switch_head           go to state 35
    para_f                go to state 36
    statement             go to state 130
    increment_statement   go to state 38
    assignment_statement  go to state 39
    void_call_statement   go to state 40
    f_call                go to state 41
    function_call         go to state 42
    if_statement          go to state 43
    if_part               go to state 44


State 130

   28 para_f: _PARA _LPAREN _TYPE vars _SEMICOLON rel_exp _SEMICOLON _PASO literal _RPAREN statement .

    $default  reduce using rule 28 (para_f)
